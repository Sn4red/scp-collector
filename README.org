#+TITLE: SCP Collector
#+AUTHOR: Sn4red
#+EMAIL: joaquin.arriaga08@gmail.com
#+DESCRIPTION: README for SCP Collector on GitHub
#+LANGUAGE: en

[[https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E]]
[[https://img.shields.io/badge/node.js-6DA55F.svg?style=for-the-badge&logo=node.js&logoColor=white]]
[[https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&logo=discord&logoColor=white]]
[[https://img.shields.io/badge/firebase-a08021.svg?style=for-the-badge&logo=firebase&logoColor=ffcd34]]

SCP Collector is a Discord bot inspired by the SCP Foundation universe.
Anomalies and files are transformed into collectible cards that can be traded
with other users. The cards are classified into different classes, with
chances to obtain holographic versions.

* Table of Contents
- [[#features][Features]]
- [[#storage][Storage]]
- [[#overview][Overview]]
  - [[#gameplay---collecting-cards][Gameplay - Collecting Cards]]
  - [[#gameplay---merging-cards][Gameplay - Merging Cards]]
  - [[#gameplay---market][Gameplay - Market]]
  - [[#trading-system][Trading System]]
  - [[#information][Information]]
- [[#vip-features][VIP Features]]
- [[#firestore-schema-and-random-selection-logic][Firestore Schema and Random Selection Logic]]

* Features
- Card capture system (with rarity and holographic features incorporated).
- Card trading between users.
- Rank, level and XP system.
- Card fusion system.
- Market for purchasing cards.

* Storage
The bot relies heavily on Firebase for data storage and handling the core
game logic.

* Overview
** Gameplay - Collecting Cards
The first step to start using the bot is to run the ~/card~ slash command.
This not only creates a personalized visual card but also registers you in
Firestore with initial values and taking your ID as the document ID, to get
you started in the game.

If you changed your Discord username, running the command again will update
it so it appears correctly on your card.

It's worth noting that using ~/card~ is not required to access the
*information* commands. It's only necessary when you want to use the bot's
main functionality.

After registering, you can start capturing cards using ~/capture~. You get 5
daily attempts, which reset at midnight (EST/EDT).

The rarity of the cards is defined by what is called a *class*. There is a
set probability of obtaining each class, and depending on which one you
get, you receive a certain amount of *XP* and *crystals*:

|----------+-------------+-----+----------|
| Class    | Probability |  XP | Crystals |
|----------+-------------+-----+----------|
| Safe     |         43% |   5 |       10 |
| Euclid   |         30% |  15 |       20 |
| Keter    |         21% |  30 |       30 |
| Thaumiel |          4% | 100 |       50 |
| Apollyon |          2% | 200 |      100 |
|----------+-------------+-----+----------|

You can see all your cards in a list with the ~/scp~ command. If you want to
see a specific one, you can use ~/showcard~ or ~/viewcard~, in case you just
want to see it for yourself (as an ephemeral message).

** Gameplay - Merging Cards
A merge consists in transforming 5 cards and converting them into a single
card of a higher class. This is useful when you want to make use of your
duplicate or less desired cards. The cards used can be from different
classes, but the class of the resulting card will always be higher than the
class of the majority of the cards used. The following are examples of
merges:

- 3 Safe and 2 Keter will merge to give a *Euclid* card.
- 4 Euclid and 1 Safe will merge to give a *Keter* card.
- 5 Euclid will merge to give a *Keter* card.

If there is no a single majority group of cards, for example, 2 Safe, 2
Euclid and 1 Keter, the result will be random between an *Euclid* or *Keter*
card.

Note that you can only use Safe, Euclid and Keter cards.

There is also a chance that the result of the merge can be a holographic
card, with the following probabilities:

|-------------+-------------|
| Holographic | Probability |
|-------------+-------------|
| Emerald     |          7% |
| Golden      |          2% |
| Diamond     |        0.7% |
|-------------+-------------|

Just like when capturing cards, you can also earn crystals by performing
merges, with the same values. However, you don't receive any XP.

** Gameplay - Market
SCP Collector features a market where 5 cards are sold weekly in exchange
for crystals. The selection refreshes every Monday at 12:05 a.m (EST/EDT),
and the same market is shared by all users. You can view it with the
~/market~ command and use ~/buy~ to purchase a card.

** Trading System
Card trades between users are always 1-to-1. Using the ~/trade~ command, you
specify the user ID, the card you want in return, and the one you're
offering. If both have the cards, a request is created, and there's a
1-minute cooldown before the other party can accept it, for security
reasons (in case of misclicks, accidental sends, etc.). You can view the
details and status of the trade using ~/viewtrade~, and you can also manage
the request through there.

If you want to cancel the trade you've sent (as long as it hasn't been
accepted yet), you'll see the *Cancel* button. To reject a trade you've
received, use the *Decline* button. If you want to accept a trade request,
use the *Accept* button, and the cards will be exchanged. Additionally, any
existing trade requests from either user that are no longer valid, such as
offers involving a card that has already been traded, will be automatically
deleted.

Any user that is not part of the trade request won't be able to see these
buttons, only the trade details.

You can view your pending incoming trade requests using ~/receivedtrades~.
This displays a list showing the trade ID, creation date, and the username
of the user who sent it. To view all the trades you've sent, use the
~/senttrades~ command. This command shows a list of pending trades at the
top, and a history of completed trades at the bottom.

To control whether you want to receive trade requests or not, you can use
the ~/disabletrades~ command to turn off this feature, and ~/enabletrades~ to
turn it back on (by default, it is enabled).

Finally, it is important to note that trade requests pending for at least
one month are automatically deleted by the bot. To be precise, this is done
every day at 11:00 p.m (EST/EDT).

** Information
There are several commands that provide useful information about the bot,
with the most important being ~/commands~. This lists all commands with a
brief description of their usage!

* VIP Features
You can get extra features by subscribing to the [[https://www.patreon.com/Sn4red][Patreon]] page. Also, the
Patreon account needs to be linked with the Discord one. Below are the
exclusive benefits:

- 10 shots daily instead of 5.
- Double XP when capturing SCP cards.
- Double crystals when capturing and merging SCP cards.
- 1000 crystals at the beginning of each month.
- Better chances of obtaining rare class cards.
- Opportunity to obtain holographic cards.
- A golden seal on your ID card.

* Firestore Schema and Random Selection Logic
In Firestore, the ~card~ collection contains documents representing different
SCP classes. Each class document has a subcollection that holds all the
individual SCP cards classified under that class:

#+BEGIN_SRC mermaid
  flowchart LR
    subgraph groupA["Collection"]
      card
    end

    subgraph groupB["Class Documents"]
      groupBSafe["Safe"]
      groupBEuclid["Euclid"]
      groupBKeter["Keter"]
      groupBApollyon["Apollyon"]
      groupBThaumiel["Thaumiel"]
    end

    subgraph groupC["Subcollections"]
      groupCSafe["Safe"]
      groupCEuclid["Euclid"]
      groupCKeter["Keter"]
      groupCApollyon["Apollyon"]
      groupCThaumiel["Thaumiel"]
    end

    subgraph groupD["Card Documents"]
      groupDSCP005["SCP-005"]
      groupDSCP006["SCP-006"]
      groupDSCP010["SCP-010"]
      groupDMore["..."]

      %% Customizing groupDMore so that it has no fill color, no strokes,
      %% and making the text bold.
      style groupDMore fill:none,stroke-width:0px,font-weight:bold
    end

    %% Connecting the subgraphs so they're aligned.
    groupA --- groupB
    groupB --- groupC
    groupC --- groupD

    %% Making subgraphs edges invisible.
    linkStyle 0 stroke-width:0px
    linkStyle 1 stroke-width:0px
    linkStyle 2 stroke-width:0px

    %% Flow through the nodes.
    card ==> groupBSafe
    groupBSafe ==> groupCSafe
    groupCSafe ==> groupDSCP006
#+END_SRC

#+RESULTS:

  Each card document follows this structure:

#+BEGIN_SRC mermaid
  erDiagram
      SCP-000 {
          string file
          string name
          int random
      }
#+END_SRC

  When the bot determines the SCP class based on probability, it performs a
  query to Firebase to retrieve the number of documents in the corresponding
  subcollection using an aggregation query:

#+BEGIN_SRC javascript
    const cardReference = database.collection('card').doc(obtainedClass)
        .collection(obtainedClass.toLowerCase());
    const cardSnapshot = await transaction.get(cardReference.count());

    const classCount = cardSnapshot.data().count;
#+END_SRC

Next, to select a card from the class, the bot generates a random number
based on the total number of documents in that subcollection. It then queries
for the document whose ~random~ field matches the generated number. If the
random number is 0, it is incremented by 1, as no card has ~random = 0~:

#+BEGIN_SRC javascript
  const randomNumber = Math.floor(Math.random() * classCount) + 1;

  const selectedCardReference = database.collection('card').doc(obtainedClass)
      .collection(obtainedClass.toLowerCase());
  const selectedCardQuery = selectedCardReference
      .where('random', '==', randomNumber);
  const selectedCardSnapshot = await transaction.get(selectedCardQuery);
                      
  const cardDocument = selectedCardSnapshot.docs[0];
  const selectedCardDocument = cardDocument.data();
#+END_SRC

Each card within a class has a unique ~random~ field value, assigned
sequentially and never repeated. This ensures consistent random selection.
The list of ~random~ values for each class is carefully maintained in a
separate ~.xlsx~ file.

If, in the future, new SCP cards are added or existing cards are moved to a
different class, the ~random~ values are redefined and updated in the ~.xlsx~
file. These updated values are then exported to ~JSON~ files and uploaded again
to Firestore.
